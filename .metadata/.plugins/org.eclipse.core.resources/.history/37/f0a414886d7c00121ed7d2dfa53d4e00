/*
	Author:	Fleury

	File:	Abutton.java
*/

import java.awt.*;
import java.awt.event.*;

public class Abutton
{
	//
	//	Default constructor.
	//
	public Abutton()
	{										//	By default, we create a button
		this("?????",						//		with a questionable label,
			 Color.black,					//		in plain black
			 43, 47,						//		at an arbitrary location,
			 143, 147);						//		and with an arbitrary size,
	}

	//
	//	Most specific constructor.
	//
	public Abutton(String someLabel,
				   Color someColor,
				   int someX, int someY,
				   int someWidth, int someHeight)
	{										//	We create a button
		setup(someLabel,					//		with a given label,
			  someColor,					//		in a given color
			  someX, someY,					//		at a given location,
			  someWidth, someHeight);		//		and with a given size,
	}

	//
	//	Initializes (or re-sets) the components of a button.
	//
	public void setup(String someLabel,
					  Color someColor,
					  int someX, int someY,
					  int someWidth, int someHeight)
	{
		label = someLabel;
		color = someColor;
		x = someX;
		y = someY;
		width = someWidth;
		height = someHeight;
		up = false;							//	Initially, the button is not up
	}

	/**
	 * flips the up/down state of the button
	 */
	public void flip()
	{
		//for you to complete
		if (isInside(x,y) == true);
				up = true;
		
	}

	/**
	 *	Determines if a given point is inside a button.
	 *	Note:  The boundary is considered within (inside) the button.
	 */
	public boolean isInside(int someX, int someY)
	{

		//for you to complete
		int buttonW = 64;
		int buttonH = 32;
		int topX = 50;
		int topY = 50;
		int botX = 150;
		int botY = 150;
		if ((someX > 50) && (someX<(topX + buttonW))){
			if ((someY > 50) && (someY<(topY + buttonH))){
				flip();
			}
		}
		
		
		
		
		return true;//so you don't have compiler errors - but this isn't what you want						
	}

	/**
	 *	Draws/paints the button
	 */
	public void paint(Graphics pane)
	{
		final int DELTA = 2;				//	To define the space between the
											//		frame and the inside of a button

		pane.setColor(Color.black);			//	Drawing the button frame
		pane.drawRect(x, y, width, height);	//		in black,

		pane.setColor(color);				//		and the inside of the button
		pane.fill3DRect(x + DELTA, y + DELTA,	//	in the given color
						width - (2*DELTA - 1),
						height - (2*DELTA - 1),
						up);

		pane.setColor(Color.black);			//	Finally, we put the label in black
											//		... and nicely centered
		int labelWidth = pane.getFontMetrics().stringWidth(label);
		int labelHeight = pane.getFontMetrics().getAscent();
		pane.drawString(label,
						x + (width - labelWidth)/2,
						y + (height + labelHeight)/2);
	}

	private String label;					//	To hold the label,
	private Color color;					//		the color,
	private int x, y,						//		the location,
				width, height;				//		and the size of the button

	private boolean up;						//	To know if the button is up or not
}